{"version":3,"sources":["Components/MobileUI/index.js","Components/Main/index.js","App.js","reportWebVitals.js","index.js"],"names":["moment","require","MobileUI","TimeNow","format","React","useState","NoteName","Text","DateTime","displayedNote","setDisplayedNote","EventTitle","EventDate","EventDetails","Events","setEvents","SmNote","SmDate","setSmDate","BtnTrigger","setBtnTrigger","DeleteEventButton","SetDeleteEventButton","Note","CurrentNote","setCurrentNote","ShowDateModal","setShowDateModal","NoteMenuIsActive","setNoteMenuIsActive","NoteMenuContentAppearActive","setNoteMenuContentAppearActive","EventMenuIsActive","setEventMenuIsActive","EventMenuContentAppearActive","setEventMenuContentAppearActive","CreateButtonAnimate","setCreateButtonAnimate","ShrinkDivIsActive","setShrinkDivIsActive","AnimationMenu","setAnimationMenu","AnimationNoteView","setAnimationNoteView","ClickButtonColor","setClickButtonColor","ClearNoteforNew","document","getElementById","value","console","log","NoteMenuShow","style","display","width","NoteMenuClose","CreateNoteMobile","Title","NoteTime","NoteText","CheckForTitle","findIndex","TitleName","newdisplayedNote","window","alert","CreateNote","DeleteNoteMobile","NoteNameIndex","NewDisplayedNote","splice","DeleteNote","UpdateNoteMobile","NewTitle","NewText","Current","UpdateNote","GetNoteMobile","e","ClickedBtn","target","innerHTML","NewCurrentNote","GetEvent","preventDefault","ClickedButton","EventTitleIndex","EventIndex","NewEvent","EventTime","EventContent","innerText","HandelDateModalClose","ETitle","EDate","DeleteEvent","targetDelete","IndexOfEvent","NewEvents","RemoveEventButton","className","onClick","AssignMobileNote","NoteButtonTitle","NoteLookup","NoteIndex","FindEvent","EventNote","ButtonView","small","down","id","map","note","Index","placeholder","onChange","Typed","button","index","Modal","size","show","onHide","backdrop","date","DatePulled","toString","dateObject","Date","momentString","NewArrDate","Button","variant","Main","large","up","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d0620ea2.chunk.js","sourcesContent":["import React, {useEffect, useState } from 'react';\nimport {Breakpoint} from 'react-socks'\nimport DatePicker from 'sassy-datepicker';\nimport { Modal, Button} from 'react-bootstrap';\n\nvar moment = require('moment');\n\nfunction MobileUI(){\n\n\n    const TimeNow = moment().format(\"MMMM Do YYYY, h:mm a\");\n    const [displayedNote, setDisplayedNote] = React.useState([\n        { NoteName: \"My Note!\", Text: \"My Very First Note!\", DateTime: \"October 22nd 2021 4:00pm\"}\n    ]);\n    const [Events, setEvents]= React.useState([\n        {EventTitle: \"Doctors Appointment\", EventDate: \"December 1, 2021\", EventDetails: \"Check up\"}\n    ]);\n    /*State to manage the Date picked in the SM Modal*/\n    const [SmDate, setSmDate] = React.useState([{ SmNote: \"Note\"}]);\n    /*controls the state of the NoteButtons for CRUD*/\n    const [BtnTrigger, setBtnTrigger]= React.useState(true);\n    const [DeleteEventButton, SetDeleteEventButton]= React.useState(false);\n    /*controls the current clicked note passes state it for array manipulation*/\n    const [CurrentNote, setCurrentNote]= React.useState([{Note: \"Note\"}]);\n    const [ShowDateModal, setShowDateModal] = useState(false);\n\n    /*Animation Controls*/\n    const [NoteMenuIsActive, setNoteMenuIsActive] =useState(false);\n    const [NoteMenuContentAppearActive, setNoteMenuContentAppearActive] = useState(false);\n    const [EventMenuIsActive, setEventMenuIsActive] = useState(false);\n    const [EventMenuContentAppearActive, setEventMenuContentAppearActive]= useState(false);\n    const [CreateButtonAnimate, setCreateButtonAnimate] =useState(false);\n    const [ShrinkDivIsActive, setShrinkDivIsActive] = useState(false);\n\n    const [EventMenuClass, setEventMenuClass] = useState(\"PadEventSm\");\n\n    //adds the default state to the notemenu \n    const [AnimationMenu, setAnimationMenu] = useState(\"PadSm\")\n\n    //adds the grow effect for notemenu\n    const [AnimationNoteView, setAnimationNoteView] =useState(\"MobileMenuElementAppear NoteFlexSm\")\n \n //once clicked not is clicked it changes the color and plays animation\n    const [ClickButtonColor, setClickButtonColor] = useState(false);\n    //CRUD Methods\n\n    function CreateNote (){\n        let Title =  document.getElementById(\"Title\").value;\n        let NoteTime = TimeNow;\n        let NoteText = document.getElementById(\"NoteText\").value;\n        /*Check displayedNote for duplicate Note Titles, or Note Text\n        if there are none, they should return -1*/ \n        let CheckForTitle = displayedNote.findIndex(function (TitleName) {\n            return TitleName.NoteName === `${Title}`;\n        });\n        console.log(CheckForTitle);\n        /* if CheckForTitle does not return -1// meaning if it is not a unique\n        title. Open the Modal */\n        if(CheckForTitle !== -1){\n            window.alert(\"You already have a Note Called this.Please make sure your Title is unique.\");\n            return;\n        }\n        /* if user tires to sumbit a blank title*/\n        if(Title === \"\"){\n            window.alert(\"You Note must have a Title\");\n            return;\n        }\n        /*log all three text fields on creation for testing*/\n        console.log(Title);\n        console.log(NoteTime);\n        console.log(NoteText);\n        /* create a new object with the text area entries and save them to \n        DisplayedNote state */\n        const newdisplayedNote = [...displayedNote, {NoteName: Title, Text: NoteText, DateTime: TimeNow}];\n        console.log(newdisplayedNote);\n        setDisplayedNote(newdisplayedNote);\n        /*set the button state to show the Update and Delete Buttons*/\n        setBtnTrigger(!BtnTrigger);\n    };\n\n    /*Used to clear Note UI in other functions*/\n    function ClearNoteforNew(){\n        document.getElementById(\"Title\").value = \"\";\n        document.getElementById(\"NoteText\").value= \"\";\n        setBtnTrigger(true);\n        console.log(BtnTrigger);\n    };\n  \n    const GetNote = e =>{\n        e.preventDefault();\n        /*setting button state*/\n        setBtnTrigger(false);\n        /*getting the name of the saved Button*/\n        let ClickedBtn = e.target.innerHTML;\n        console.log(\"here is the ClickedBtn return \" + ClickedBtn);\n        /*Removed the current button state, and add the title of the saved button\n            you clicked to the CurrentNote State*/\n        let NewCurrentNote=[...CurrentNote];\n        NewCurrentNote.splice(0, 1, {Note: `${ClickedBtn}`});\n        setCurrentNote(NewCurrentNote);\n        /* Search through displayedNote for the Name of the Saved Button\n        you Clicked and returns the position in the Array*/\n        let NoteNameIndex = displayedNote.findIndex(function (TitleName) {\n            return TitleName.NoteName === `${ClickedBtn}`;\n        });\n        /*Takes the position of NoteNameIndex and Searches \n        displayedNote. Then  deconstructs displayedNote*/\n        let Note = displayedNote[NoteNameIndex]\n        let Title = Note.NoteName;\n        let Text = Note.Text;\n        /*Assigns the Note to the text areas*/\n        document.getElementById(\"Title\").value = Title;\n        document.getElementById(\"NoteText\").value = Text;\n        };\n\n    function DeleteNote(){\n    /* find the index of the Title value, and return its undex*/\n    let Title = document.getElementById(\"Title\").value;\n    let NoteNameIndex = displayedNote.findIndex(function (TitleName) {\n            return TitleName.NoteName === `${Title}`;\n    });\n    console.log(NoteNameIndex);\n    /*splice the returned index from the displayNote*/\n    let NewDisplayedNote = [...displayedNote];\n    NewDisplayedNote.splice(NoteNameIndex, 1);\n    console.log(NewDisplayedNote);\n    /* update the state of with the new displayedNote */\n    setDisplayedNote(NewDisplayedNote);\n    /*set the Button state to create Note button, and clear all text area fields */\n    setBtnTrigger(true);\n    ClearNoteforNew()\n    };\n\n    function UpdateNote(){  \n        /*creating targets */\n        let NewDisplayedNote =[...displayedNote];\n        let NewTitle = document.getElementById(\"Title\").value;\n        let NewText = document.getElementById(\"NoteText\").value;\n        let NoteTime = TimeNow;\n       /*Taking the Current saved Note. This should be the note you clicked on \n       then Destructing that to get the Title of the note you clicked*/\n        let NowNote = CurrentNote[0]\n        let Current= NowNote.Note\n        /*Finding by CurrentNote in displayedNote and returning the index*/\n        let NoteNameIndex = displayedNote.findIndex(function (TitleName) {\n        return TitleName.NoteName === `${Current}`;\n        });\n        /*taking that NoteNameIndex's Index and splicing it out, and setting \n        the text area data as the new object in the array then update\n        displayedNote*/\n        NewDisplayedNote.splice(NoteNameIndex, 1, {NoteName:`${NewTitle}`, Text: `${NewText}`, DateTime: `${NoteTime}` });\n        setDisplayedNote(NewDisplayedNote);\n    };\n\n    /*Mobile Functions*/\n\n/*Opens Notes Menu*/\nfunction NoteMenuShow(){\n    /*hide flexboxes */\n\n      document.getElementById(\"NoteInfoSectionSm\").style.display = \"none\";\n      document.getElementById(\"NoteFlexSmBox\").style.display = \"none\";\n      document.getElementById(\"EventMenuButton\").style.display = \"none\";\n      document.getElementById(\"EventMenu\").style.display = \"none\";\n    \n    /*resize menu and show content*/\n        //activates state and rewrites className to apply animation\n     setNoteMenuIsActive(true);\n     setNoteMenuContentAppearActive(true);\n      document.getElementById(\"NoteMenu\").style.width=\"100%\";\n      document.getElementById(\"MenuButton\").style.display= \"none\"\n      document.getElementById(\"NoteContentControler\").style.display = \"flex\"\n    \n    }\n    \n    /* Opens Event Menu*/\n    function EventMenuShow(){\n        /*hide divisions*/\n\n        document.getElementById(\"NoteInfoSectionSm\").style.display = \"none\";\n        document.getElementById(\"NoteFlexSmBox\").style.display = \"none\";\n        document.getElementById(\"EventMenuButton\").style.display = \"none\";\n        document.getElementById(\"NoteMenu\").style.display= \"none\";\n        document.getElementById(\"ShrinkDiv\").style.display = \"flex\";\n  \n       \n        document.getElementById(\"EventMenu\").style.width =\"100%\";\n        document.getElementById(\"MenuButton\").style.display =\"none\";\n        document.getElementById(\"EventContentControler\").style.display = \"flex\";\n      /*Activates State and rewrites className to apply animation*/\n        setEventMenuIsActive(true);\n        setEventMenuContentAppearActive(true);\n        setShrinkDivIsActive(true);\n        \n        \n    }\n    /*Closes Event Menu*/\n    function EventMenuClose(){\n    /*Show divisions*/\n        document.getElementById(\"NoteInfoSectionSm\").style.display = \"flex\";\n        document.getElementById(\"NoteFlexSmBox\").style.display = \"flex\";\n        document.getElementById(\"EventMenuButton\").style.display = \"flex\";\n        document.getElementById(\"EventContentControler\").style.display = \"none\";\n        document.getElementById(\"MenuButton\").style.display =\"flex\";\n        document.getElementById(\"NoteMenu\").style.display= \"flex\";\n        document.getElementById(\"EventMenu\").style.width =\"1%\";\n        document.getElementById(\"ShrinkDiv\").style.display = \"none\";\n        document.getElementById(\"ShrinkDiv\").style.width = \"0.002%\";\n        /* resets States so animation will replay*/\n        setEventMenuIsActive(false);\n        setEventMenuContentAppearActive(false);\n     \n    }\n    \n    /* Closes Note Menu*/\n    function NoteMenuClose(){\n        //adds the shrink animation class to notemenu\n     setAnimationMenu(\"PadSm MobileNoteMenuShrink\");\n     setAnimationNoteView(\" MobileMenuElementAppear NoteFlexSm MobileMenuGrow\");\n\n     \n        /*changes display of flex boxes to flex so we can see them*/\n        //document.getElementById(\"NoteInfoSectionSm\").style.display = \"flex\";\n        document.getElementById(\"NoteInfoSectionSm\").style.display =\"flex\"\n        document.getElementById(\"NoteFlexSmBox\").style.display = \"flex\";\n        document.getElementById(\"EventMenuButton\").style.display = \"flex\";\n        document.getElementById(\"EventMenu\").style.display = \"flex\";\n    \n        /*resizes menu and hides content. Shows main flex\"*/\n        document.getElementById(\"NoteMenu\").style.width=\"1%\";\n        document.getElementById(\"MenuButton\").style.display= \"flex\";\n        document.getElementById(\"NoteContentControler\").style.display = \"none\";\n        //reset state and rewrites className to setup onclick animation\n        setNoteMenuIsActive(false);\n        setNoteMenuContentAppearActive(false);\n    }\n    \n    /*removes note input from DOM*/\n    function MobileClearNoteforNew(){\n        ClearNoteforNew();\n        NoteMenuClose();\n    }\n    \n    /*Creates a Note, and opens Note Menu*/\n    function CreateNoteMobile(){\n        CreateNote();\n        NoteMenuShow();\n    }\n    \n    /* Deletes a Note and opens Note Menu*/\n    function DeleteNoteMobile(){\n        DeleteNote();\n        NoteMenuShow();\n    }\n    \n    /* Updates a currently selected Note, and opens the Note Menu*/\n    function UpdateNoteMobile(){\n        UpdateNote();\n        NoteMenuShow();\n    }\n    \n    /* Opens the clicked note button, and closes the Note menu*/\n    const GetNoteMobile= e=>{\n\n        setClickButtonColor(true);\n\n        /*Working here*/\n        NoteMenuClose();\n        /*setting button state*/\n     setBtnTrigger(false);\n     /*getting the name of the saved Button*/\n     let ClickedBtn = e.target.innerHTML;\n     console.log(\"here is the ClickedBtn return \" + ClickedBtn);\n     /*Removed the current button state, and add the title of the saved button\n      you clicked to the CurrentNote State*/\n     let NewCurrentNote=[...CurrentNote];\n     NewCurrentNote.splice(0, 1, {Note: `${ClickedBtn}`});\n     setCurrentNote(NewCurrentNote);\n     /* Search through displayedNote for the Name of the Saved Button\n     you Clicked and returns the position in the Array*/\n     let NoteNameIndex = displayedNote.findIndex(function (TitleName) {\n        return TitleName.NoteName === `${ClickedBtn}`;\n    });\n    /*Takes the position of NoteNameIndex and Searches \n    displayedNote. Then  deconstructs displayedNote*/\n    let Note = displayedNote[NoteNameIndex]\n    let Title = Note.NoteName;\n    let Text = Note.Text;\n    /*Assigns the Note to the text areas*/\n    document.getElementById(\"Title\").value = Title;\n    document.getElementById(\"NoteText\").value = Text;\n    setClickButtonColor(false);\n     \n    };\n    \n    /* Gets the Event Clicked and displays the Event info in the Event menu*/\n    const GetEvent = e =>{\n    e.preventDefault();\n    /*Targets the HTML of the Button Clicked*/\n    let ClickedButton = e.target.innerHTML;\n    /*Searches the Events Object for the InnerHTML of the Button and returns an indeex*/\n    let EventTitleIndex = Events.findIndex(function (EventIndex){\n        return EventIndex.EventTitle === `${ClickedButton}`;\n    })\n    /*de-structure the Events Object*/ \n    let NewEvent= Events[EventTitleIndex];\n    let EventTitle = NewEvent.EventTitle;\n    let EventTime = NewEvent.EventDate;\n    let EventContent = NewEvent.EventDetails;\n    \n    /* assigning structured Events Object to DOM*/\n    document.getElementById(\"EventTime\").innerText = EventTime;\n    document.getElementById(\"EventTitle\").innerText = EventTitle;\n    document.getElementById(\"EventDetails\").innerText =EventContent;\n    \n    /*activates the Delete Button*/\n    SetDeleteEventButton(true);\n    }\n    \n    /* Fires when the Create Event Button is clicked*/\n    const onChange = (date) => {\n        /* convert to a string*/\n        let DatePulled = date.toString();\n        /* convert date to Moment.js format */\n        let dateObject = new Date(DatePulled);\n        let momentObject = moment(dateObject);\n        let momentString = momentObject.format('MMMM Do YYYY'); \n        console.log(\"this is the date pulled \" + momentString);\n        /*splice old value and add current date picker selection*/\n        let NewArrDate =[...SmDate];\n        NewArrDate.splice(0, 1, {SmNote: `${momentString}`});\n        console.log(NewArrDate);\n        /* Save state*/\n        setSmDate(NewArrDate);\n        \n      };\n    \n    const HandelDateModalOpen= () =>{\n        /*remove Events Menu */\n        document.getElementById(\"MainFlexBoxSm\").style.display = \"none\";\n        document.getElementById(\"EventContentControler\").style.display = \"none\";\n        document.getElementById(\"EventMenu\").style.display ='none';\n        /* Activates the Modal By Changing the State*/\n        setShowDateModal(true);\n    \n    }\n    \n    const HandelDateModalClose= () => {\n        /*Pull Event Info From the DOM in the Modal*/\n        let ETitle = document.getElementById(\"SmModalTitleInput\").value;\n        if(ETitle === \"\"){\n            window.alert(\"You must Name your Event\");\n            return;\n        }\n       let EDate = SmDate[0].SmNote\n        /* Update the Events State*/\n        let NewEvent = [...Events, \n            {EventTitle: `${ETitle}`, EventDate: `${EDate}`, EventDetails: \"Click one of your Notes to assign it!\"}];\n        setEvents(NewEvent);\n        console.log(Events); \n        document.getElementById(\"MainFlexBoxSm\").style.display = \"flex\";\n        document.getElementById(\"EventContentControler\").style.display = \"flex\";\n        document.getElementById(\"EventMenu\").style.display ='flex';\n    \n        /*Shut down the Modal*/\n        setShowDateModal(false);\n    }\n    \n    function ClearEventDisplay(){\n        /*Erase the Event Details of currently displayed note*/\n        document.getElementById(\"EventTitle\").innerHTML = \"\";\n        document.getElementById(\"EventTime\").innerHTML = \"\";\n        document.getElementById(\"EventDetails\").innerHTML =\"\";\n        /*Set the Display Button to not Display*/\n        SetDeleteEventButton(false);\n    }\n    \n    function DeleteEvent(){\n        let targetDelete = document.getElementById(\"EventTitle\").innerHTML;\n        let EventIndex = Events.findIndex(function (IndexOfEvent){\n            return IndexOfEvent.EventTitle === `${targetDelete}`\n        });\n        let NewEvents = [...Events];\n        NewEvents.splice(EventIndex, 1);\n        setEvents(NewEvents);\n        ClearEventDisplay();\n    }\n    \n    function RemoveEventButton(){\n        if(DeleteEventButton === true){\n            return(\n                <button className=\"DeleteEventButtonSm\" onClick={DeleteEvent} >Delete Event</button>\n            )\n        }\n        if(DeleteEventButton === false){\n            return(\n                <div></div>\n            )\n        }\n    \n    };\n    \n    const  AssignMobileNote = e =>{\n        e.preventDefault();\n        /*Targets the HTML of the Button Clicked*/\n        let NoteButtonTitle = e.target.innerHTML;\n        let ETitle = document.getElementById(\"EventTitle\").innerHTML;\n        console.log(ETitle);\n          if(DeleteEventButton === false){\n            window.alert(\"You must select a Event before assigning it a note!\");\n            }\n    \n          if(DeleteEventButton === true){\n              //Look up Note Button that was clicked\n            let NoteLookup = displayedNote.findIndex(function (NoteIndex){\n            return NoteIndex.NoteName === `${NoteButtonTitle}`\n            })\n    \n            //look up Event that is selected\n            let EventTitleIndex = Events.findIndex(function (EventIndex){\n                return EventIndex.EventTitle === `${ETitle}`\n                \n            })\n            //Destructuring DisplayedNote\n            let NoteTarget = displayedNote[NoteLookup];\n            let NoteText = NoteTarget.Text;\n    \n            //Destructuring Events\n            let NewEvent = [...Events]\n            let FindEvent = Events[EventTitleIndex];\n            let EventNote = FindEvent.EventNote;\n            let EventTitle = FindEvent.EventTitle\n            let EventDate = FindEvent.EventDate\n    \n            // Updates the Events. It removes the old Event and adds the new one with the update Note text we looked up\n            NewEvent.splice(EventTitleIndex, 1, {EventTitle:`${EventTitle}`, EventDate: `${EventDate}`, EventDetails: `${NoteText}` });\n            setEvents(NewEvent);\n    \n            // Since React is Immutable, this assigns the displayed note to the note text we looked up. That way it reflects instantly\n            document.getElementById(\"EventDetails\").innerHTML = NoteText\n    \n        }\n    }\n\n    function OnchangeTitle (Typed) {\n\n        if(BtnTrigger === true ){\n\n        /*change the style to flex so the Create button shows up*/\n        document.getElementById(\"CreateButtonFlex\").style.display = \"flex\";\n        /*insert animation here*/\n        setCreateButtonAnimate(true);\n        };\n\n       \n    };\n\n    \n    function ButtonView() {\n\n        if(BtnTrigger === false){\n            return(\n\n                <Breakpoint small down>\n                <div className=\"NoteButtonFlex\">\n                 <button className=\"DeleteNoteButtonSm\" onClick={DeleteNoteMobile}>Delete Note</button>\n                 <button className=\"UpdateNoteButtonSm\" onClick={UpdateNoteMobile}>Update Note</button>\n                </div>\n                </Breakpoint>\n                \n            )\n        }\n\n        if(BtnTrigger === true){\n            return(\n                    <Breakpoint small down>\n                    <div id=\"CreateButtonFlex\" className=\"NoteButtonFlexSm\">\n                            <button className={CreateButtonAnimate ? \"CreateNoteButtonSm MobileBounceDown\": \"CreateNoteButtonSm\"} onClick={CreateNoteMobile}>Create Note</button>\n                    </div>\n    \n                    </Breakpoint>\n\n          )\n        }\n    }\n\n    return(\n\n        <Breakpoint small down>\n\n        <div id=\"MainFlexBoxSm\" className=\"MainflexSm\">\n\n            <div id=\"NoteMenu\" className={NoteMenuIsActive ? \" PadSm MobileMenuGrow\" :  AnimationMenu}>\n                <div id=\"NoteContentControler\" className={NoteMenuContentAppearActive ?  \"NoteControlFlex MobileMenuElementAppear\": \"NoteControlFlex\"}>\n                   \n                 <div className=\"CloseNoteMenu\" onClick={NoteMenuClose}></div>\n\n                 <div className=\"PadTitle\">Notes</div>\n\n                <button  onClick={MobileClearNoteforNew}className=\"CreateButtonSm\" >Create New Note +</button>\n               \n                <div className=\"ClickMeDiv\">Click to See Your Note</div>\n               <div id=\"SavedNotes\" className=\"SavedNotesFlexSm\">\n                {displayedNote.map(note =>{\n\n                    return(\n                        <div>\n                        <div className=\"NoteDate\">{note.DateTime}</div>\n                        <button id={note.Index} key={note.Index} onClick={GetNoteMobile}className={ClickButtonColor ? \"SelectedNoteItem\" :\"NoteItem\" }>{note.NoteName}</button>\n                        </div>\n        )})}                    \n               </div>\n\n            </div>\n\n            </div>\n\n            <div id=\"MenuButton\"className=\"PadButtonSm\">\n                <div className=\"MenuNoteButtonSm\" onClick={NoteMenuShow}>Notes</div>\n            </div>\n\n            \n            \n                <div id=\"NoteFlexSmBox\"className={AnimationNoteView}>\n                    <div id=\"NoteInfoSectionSm\" className=\"NoteInfoSm\">\n                        <div className=\"NoteTitleSm\">\n\n                        <ButtonView/>\n\n                        <input id=\"Title\"  placeholder=\"Your Title Here\"  onChange={OnchangeTitle} className=\"TitleinfoSm\"></input>\n                    </div>\n\n                    <div className=\"NoteTimeSm\"id=\"TimeStamp\">{TimeNow}\n                    </div>\n\n                </div>\n\n                <div className=\"NoteInfoText\">\n                    <textarea id=\"NoteText\" placeholder=\"Your Note Here\" className=\"NoteTextBoxSm\"></textarea>\n                </div>\n                    \n            </div>\n\n            <div id=\"EventMenuButton\" className=\"PadEventButtonSm\">\n                \n                    <div className=\"MenuEventButtonSm\" onClick={EventMenuShow}>Events</div>\n                \n            </div>\n            <div id=\"ShrinkDiv\" className={ShrinkDivIsActive ? \"MobileGrowDivShow\":\"MobileGrowDiv\"}></div>\n            <div id=\"EventMenu\" className= {EventMenuIsActive ? \"PadEventSm MobileMenuGrow \" : \"PadEventSm\" }>\n                <div id=\"EventContentControler\" className={EventMenuContentAppearActive ? \" EventControlFlex MobileMenuElementAppear\" : \"EventControlFlex\"}>\n                    <div className=\"CloseEventNoteMenu\" onClick={EventMenuClose}></div>\n                    <div className=\"EventTitleSm\">Events</div>\n            <div id =\"UpcomingEvents\" className=\"UpcomingEventsFlexSm\">\n                    {Events.map((button, index) =>{\n                    return(\n                    <div>\n                    <div className=\"NoteDate\">{button.EventDate}</div>\n                    <button  key={index} className=\"NoteItem\" onClick={GetEvent}>{button.EventTitle}</button>\n                    </div>\n\n                    )})}\n                \n            </div> \n\n            <button className=\"CreateEventButtonSm\" onClick={HandelDateModalOpen} > Create New Event +</button>\n                \n            <RemoveEventButton/>\n\n                <Modal  className=\" border-dark .modal-content\"\n                  size=\"lg\"\n                  show={ShowDateModal}\n                  onHide={HandelDateModalClose}\n                  backdrop=\"static\"\n                  aria-labelledby=\"example-modal-sizes-title-lg\">\n                      <div className=\"SmallModalSm\">\n\n                        <div className=\"SmallModalTitleSm\">Event Date</div>\n                        <DatePicker id=\"dateP\" onChange={onChange}/>\n                        <div className=\"SmallModalTitleSm\">Event Name</div>\n                        <input id=\"SmModalTitleInput\" className=\"SmallModalEventTitle\"></input>\n                        <Button  className=\" CreateEventButtonSmModal border-dark\"variant=\"secondary\" onClick={HandelDateModalClose}>\n                        Finished\n                        </Button>\n                      </div>\n                  \n                </Modal>\n\n                <div id=\"EventTime\" className=\"SelectedEventTimeSm\"></div>\n                \n                <div className=\"SelectedEventTitleFlexSm\">\n                <div id=\"EventTitle\"className=\"SelectedEventTitleSm\"></div>\n                </div>\n\n                <div className=\"SelectedEventDetailSm\">Details</div>\n                \n                <div id=\"EventDetails\" className=\"SelectedEventDetailsSm\"></div>\n\n                <div className=\"NoteAssignFlex\">\n\n                <div id=\"SavedNotes\" className=\"SavedNotesEventsFlexSm\">\n                {displayedNote.map(note =>{\n\n                    return(\n                        <div>\n                        <div className=\"NoteDate\">{note.DateTime}</div>\n                        <button id={note.Index} key={note.Index} onClick={AssignMobileNote} className=\"NoteItem\">{note.NoteName}</button>\n                        </div>\n        )})}                    \n               </div>\n               \n                </div>\n\n                </div>\n            </div>\n            \n        </div>\n\n        </Breakpoint>\n\n    )\n};\n\nexport default MobileUI","import React, {useEffect, useState } from 'react';\nimport {Breakpoint} from 'react-socks'\n\nimport {FindInindexReturnposition} from '../Hooks/index';\n\nimport MobileUI from '../MobileUI';\n\nvar moment = require('moment');\n\nfunction Main() {\n    \n    return(\n        \n<div>\n\n    <Breakpoint large up>\n<div className=\"LgFlex\">\n           \n                <div className='LgTitle'>Welcome to React Thought!!</div>\n                <div className=\"LgintroText\">\n                    Thanks for visiting! please scan the QR code.\n                    This is a  program I built to show proficiency in React.\n                    Its not ground breaking, or amazing its basic note app. That lets you\n                    update all your calendars all at once. \n                </div>\n                <div className='Lgimage'></div>\n\n                \n</div>\n\n\n    </Breakpoint>\n\n \n\n\n\n    <MobileUI/>\n\n    </div>\n    )\n\n\n\n\n\n\n       \n\n    \n};\nexport default Main","\nimport './App.css';\nimport Main from './Components/Main'\nimport  {BreakpointProvider } from 'react-socks';\n\n\nfunction App() {\n  return (\n    <BreakpointProvider>\n    <div className=\"App\">\n          <Main/>\n    </div>\n    </BreakpointProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}